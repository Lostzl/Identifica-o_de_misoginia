# -*- coding: utf-8 -*-
"""competicao_II_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16EN4EWM-Mo25AJXSzByrzs853Lfoqq_n
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn import svm
from itertools import zip_longest
import nltk
import pandas as pd
import matplotlib.pyplot as plt
import string

nltk.download('punkt')
nltk.download('stopwords')
exclude = set(string.punctuation)

# Tokenização
def tokenize(text):
    # Tokenização
    tokens = nltk.word_tokenize(text)
    
    # Stemização
    stems  = []
    for item in tokens:
        stems.append(nltk.stem.snowball.SnowballStemmer('english').stem(item))
    return stems

# Remoção de pontuação
def dot_remove(x): 
    try: 
        x = ''.join(ch for ch in x if ch not in exclude) 
    except: 
        pass 
    return x

dt_train = pd.read_csv('train.csv', low_memory=False)
dt_test = pd.read_csv('test.csv', low_memory=False)

dt_train.head()

# Removendo a pontuação
dt_train['text'] = dt_train['text'].apply(dot_remove).str.lower()
dt_test['text'] = dt_test['text'].apply(dot_remove).str.lower()

dt_train.head()

x_train, x_test, y_train, y_test = train_test_split(dt_train[['text']], dt_train.misogynous, train_size=0.8, random_state=42)

x_train.head()

# Separação dos dados quando para PREDIÇÃO REAL.
x_train = dt_train[['text']]
y_train = dt_train.misogynous
x_test = dt_test[['text']]

stop_words = nltk.corpus.stopwords.words('english')

text_clf = Pipeline([# vectorize
                     ('vect', TfidfVectorizer(tokenizer=tokenize, 
                                              stop_words = stop_words,
                                              ngram_range=(1, 2))),
                     #classifier
                     ('clf', svm.SVC(kernel='linear')),
                     ])
# 1 - svm.SVC(kernel='linear')
# 2 - MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(70, ), random_state=1, verbose=True)
# 3 - RandomForestClassifier(n_estimators=25, max_depth=None, min_samples_split=2, random_state=3)

text_clf = text_clf.fit(x_train.text, y_train)

# Verificação de Métricas para medir o desempenho da Classificação.
y_true, y_pred = y_test, text_clf.predict(x_test.text)
c = confusion_matrix(y_test, y_pred)
print(classification_report(y_true, y_pred))
print('\nAccuracy: {:.3f}%'.format(float(accuracy_score(y_test, y_pred) * 100)))
print('\nConfusion Matrix:')
disp = ConfusionMatrixDisplay(confusion_matrix=c,
                              display_labels=text_clf.classes_)
disp.plot()

# Predição dos dados de Teste.
j = text_clf.predict(x_test.text)

# PARA SUBMISSÃO
submission = pd.DataFrame.from_records(zip_longest(dt_test['id'], j), columns=['ID', 'misogynous'])

submission.set_index('ID').to_csv('submission.csv')

submission